
var Sketch = Sketch || {};

/**
 * @classdesc Creates an instance of the SketchGen module. SketchGen takes a JSON tree output by the default Jison generated parser and outputs MVM bytecode used to drive computations and canvas operations.
 * @class Sketch.SketchGen
 * @public
 * @author FelixMcFelix (Kyle S.)
 */

Sketch.SketchGen = function(){
	var outBuffer = [];
	var programCounter = 0;
	var scopeStack = [];
	var stackPtr = 0;

	var instructions = Sketch.bindInstructions(this);

	this.emit = function(code){
		outBuffer.push(code);
		programCounter++;
	}

	this.interpretNode = function(node){
		if(Array.isArray(node)){
			node.forEach(this.interpretNode.bind(this));
		} else{
			return instructions[node.type](node.arguments);
		}
	};

	this.scopePush = function(){
		scopeStack.push(new Sketch.SketchGen.ScopeStackFrame());
		stackPtr++;
	};

	this.scopePop = function(){
		scopeStack.pop();
		stackPtr--;

		// TODO: Patch missed function calls (equivalent to hoisting).
		// TODO: Handle missed variable lookups in a different manner.
	};

	this.scopeRegister = function(label, type, extra){
		var curFrame = scopeStack[stackPtr];

		if (!curFrame.labelTable[label]){
			var destAddr = (type === "function") ? programCounter : curFrame.nextData++;
			curFrame.labelTable[label] = new Sketch.SketchGen.Label(destAddr, type);
		} else {
			throw "Illegal attempt to redefine variable "+label+".";
		}
	};

	this.scopeLookup = function(label){
		var stack = 0;
		var out = null;

		for(null; stackPtr-stack>=0; stack++){
			var frame = scopeStack[stackPtr-stack];
			var entry = frame.labelTable[label];
			if (entry){
				out = {entry: entry, stack: stack};
				break;
			}
		}

		if (out === null)
			throw "BAD LOOKUP.";

		return out;
	};

	/**
	 * Compile a Sketch program.
	 * @method Sketch.Driver#compile
	 * @param {Object} program - an AST object generated by 
	 * @returns number[] - an array of opcodes and literals to be parsed by MVM.
	 * @public
	 */
	this.interpret = function(program){
		this.cleanState();

		// this.testStack();

		this.interpretNode({type: Sketch.SketchGenNodes["program"], arguments: program});
		return outBuffer;
	};

	this.cleanState = function(){
		outBuffer = [];
		programCounter = 0;
		scopeStack = [];
		this.scopePush();
		stackPtr = 0;
	}

	this.testStack = function(){
		//Test stack architecture
		this.scopeRegister("globalInt", "int")
		this.scopePush();
		this.scopeRegister("intA", "int");
		this.scopeRegister("intB", "int");

		console.log("Registered a higher up int as well as two closer ones.");

		console.log("Performing a lookup for each entry. Expect \n\t{entry:{address:0, type:\"int\"}, stack: 1}\n\t{entry:{address:1, type:\"int\"}, stack: 0}");
		console.log(this.scopeLookup("globalInt"));
		console.log(this.scopeLookup("intB"));

		console.log("Performing a double registration.");
		try {
			this.scopeRegister("intA", "int");
			console.log("Double registration of intA succeeded, something broke!");
		} catch (e) {
			console.log("Double registration of intA threw, as expected.");
		}

		console.log("Testing override of globalInt with a float. Expect \n\t{entry:{address:2, type:\"float\"}, stack: 0}");
		this.scopeRegister("globalInt", "float");
		console.log(this.scopeLookup("globalInt"));

		console.log("Testing failed lookup.");
		console.log(this.scopeLookup("notReal"));

		console.log(this.scopeStack);

		this.scopePop();

		//End test
	}
}

/**
 * @classdesc Simple semantic class for use in the {@link Sketch.SketchGen} scope stack.
 * @class Sketch.SketchGen.ScopeStackFrame
 * @public
 * @author FelixMcFelix (Kyle S.)
 */
Sketch.SketchGen.ScopeStackFrame = function(){
	this.labelTable = {};
	this.nextData = 0;
}

/**
 * @classdesc Simple semantic class for use in the {@link Sketch.SketchGen.ScopeStackFrame} label table.
 * @class Sketch.SketchGen.Label
 * @public
 * @param {Number} addr - the address the label references within its data frame.
 * @param {String} type - the type of the variable represented by the label.
 * @param {Object} [extra] - any extra data (function parameters etc.) that must be known about the label.
 * @author FelixMcFelix (Kyle S.)
 */
Sketch.SketchGen.Label = function(addr, type, extra){
	this.address = addr;
	this.type = type;
	if(extra){
		this.extra = extra;
	}
}

Sketch.SketchGen.enume = "test";