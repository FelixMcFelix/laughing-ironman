
var Sketch = Sketch || {};

/**
 * @classdesc Creates an instance of the SketchGen module. SketchGen takes a JSON tree output by the default Jison generated parser and outputs MVM bytecode used to drive computations and canvas operations.
 * @class Sketch.SketchGen
 * @public
 * @author FelixMcFelix (Kyle S.)
 */

Sketch.SketchGen = function(){
	var emit = function(code){
		buffer.push(code);
	}

	var instructions = {
		//Program header.
		program: function(args){interpretNode(args);},

		//Arithmetic instructions
		addition: function(args){interpretNode(args[0]);interpretNode(args[1]);emit(MVM.opCodes.IADD);},
		subtraction: function(args){interpretNode(args[0]);interpretNode(args[1]);emit(MVM.opCodes.ISUB);},
		multiplication: function(args){interpretNode(args[0]);interpretNode(args[1]);emit(MVM.opCodes.IMUL);},
		division: function(args){interpretNode(args[0]);interpretNode(args[1]);emit(MVM.opCodes.IDIV);},

		//Literals and identifiers.
		num: function(args){emit(MVM.opCodes.LOADC);emit(args);}
	}

	var buffer = [];

	interpretNode = function(node){
		if(Array.isArray(node)){
			node.forEach(interpretNode);
		} else{
			instructions[node.type](node.arguments);
		}
	}

	/**
	 * Compile a Sketch program.
	 * @method Sketch.Driver#compile
	 * @param {Object} program - an AST object generated by 
	 * @returns number[] - an array of opcodes and literals to be parsed by MVM.
	 * @public
	 */
	this.interpret = function(program){
		buffer = [];
		interpretNode({type: "program", arguments: program});
		return buffer;
	}
}