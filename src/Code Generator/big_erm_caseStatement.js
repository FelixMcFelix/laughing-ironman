/* Recursive Descent Tree Walker
 * 
 * 		Embedded Heterogeneous Tree Walker pattern
 * 
 */


/* START PROGRAM SETUP 
 * 
 * AST generated by parser, as a JSON string.
 * thisSketch = objectified version of AST
 */
const AST = '{"type":"test", "arguments":[{"type":"test", "arguments":[12, 8]}, 7]}';
console.log(AST);

var thisSketch = new Object ()
thisSketch.type = "program",
thisSketch.arguments = JSON.parse(AST)

//TODO - parse tree, {symbol, label} table, constant pool, opcodes to push.

treeDepth = 0;

/* END PROGRAM SETUP */

walk (thisSketch);

// case statement corresponds with each of the structures in the BNF.
//  (this could just as easily be implemented as a big if/else block)
function walk(obj) {

	printNode(obj);

	treeDepth += 1;
	
	switch(obj.type){

		case "test":
			walkTest(obj);
			break
		case "program":
			walkProgram(obj);
			break;
		case "function":
			walkFunction(obj);
			break;
		case "variable-decl-assign":
			walkVaraibleDeclAssign(obj);
			break;
		case "variable-decl":
			walkVariableDecl(obj);
			break;
		case "addition":
			walkIf(obj);
			break;
		case "ifelse":
			walkIfElse(obj);
			break;
		case "while":
			walkWhile(obj);
			break;
		case "do_while":
			walkDoWhile(obj);
			break;
		case "for":
			walkFor(obj);
			break; 
		case "addition":
			walkAddition(obj);
			break;
		case "minus":
			walkMinus(obj);
			break;
		case "multiplication":
			walkMultiplication(obj);
			break;
		case "division":
			walkDivision(obj);
			break
		case "modulo":
			walkModulo(obj);
			break;
		case "add_assign":
			walkAddAssign(obj);
			break;
		case "sub_assign":
			walkSubAssign(obj);
			break;
		case "multi_assign":
			walkMultiAssign(obj);
			break;
		case "div_assign":
			walkDivAssign(obj);
			break;
		case "mod_assign":
			walkModAssign(obj);
			break;
		case "increment":
			walkIncrement(obj);
			break;
		case "decrement":
			walkDecrement(obj);
			break;
		case "and":
			walkAnd(obj);
			break;
		case "or":
			walkOr(obj);
			break;
		case "bit-XOR":
			walkBitXOR(obj);
			break;
		case "bit-AND":
			walkBitAND(obj);
			break;
		case "bit-OR":
			walkBitOR(obj);
			break;
		case "bit-right-shift":
			walkBitRightShift(obj);
			break;
		case "bit-left-shift":
			walkBitLeftShift(obj);
			break;
		case "zero-fill-right-shift":
			walkZeroFillRightShift(obj);
			break;
		case "equality":
			walkEquality(obj);
			break
		case "less-than":
			walkLessThan(obj);
			break;
		case "larger-than":
			walkLargerThan(obj);
			break;
		case "not-equal":
			walkNotEqual(obj);
			break;
		case "less-than-or-equal":
			walkLessThanOrEqual(obj);
			break;
		case "greater-than-or-equal":
			walkGreaterThanOrEqual(obj);
			break;
		case "assign":
			walkAssign(obj);
			break;
		
		default :
			walkUnknown(obj);
			break;
		
	}

	treeDepth -= 1;
}

/* console printing tools */

function printSpace () {
	return treeDepth + " ";
}

function printNode (obj) {
	console.log(printSpace() + obj.type + " node");
	console.log(printSpace() + obj.arguments);
	console.log(obj);
}

/* Walkers for all different types of node */

function walkTest(obj) {
	
	for (arg in arguments) {
		if (typeof arg == "number") {
			console.log(arg);
		} else {
			walk (arg);
		}
	}
}

function walkProgram(obj) {
	
	var programTree = obj.arguments;
	
	walk (programTree);
	
}

/* 
 * for example in 
 * 	 Function Foo(int x) -> int{
 * 		int y = x + 1;
 * 		return y;
 * 	 }
 * declarator = "Foo"
 * declarationList = ["int", "x"]
 * returnType = "int"
 *  functionBody would consist of a decl list and a statement list for what is contained in the body
 */
function walkFunction(obj){
	var declarator = obj.arguments[0];			// name of function
	var declarationList = obj.arguments[1];		// list of parameters
	var returnType = obj.arguments[2];			// return type of function
	var functionBody = obj.arguments[3];		// optional decl/statement_lists
	
	// add function name/return type to symbol table
	// walk list of parameters (which implies adding them to symbol table also)
	// walk body
}

/* for example in int x = 1
 * type = int
 * declarator = x
 * exp = 1
 */
function walkVaraibleDeclAssign(obj){
	var type = arguments[0];
	var declarator = arguments[1];
	var exp = arguments[2];
	
	// walkVariableDecl ([type, declarator])
	// walkAssign ([type, arguments]) ?
}

/* for example in int x;
 * type = int
 * declarator = x
 */
function walkVariableDecl(obj){
	var type = arguments[0];
	var declarator = arguments[1];		// name of variable
	
	// add varable type/declarator to symbol table
}

/* for example in if(x ?= 1){*do some code"}
 * expression would be a equality check node for x and 1
 * statements would be a statement list with some code
 */
function walkIf(obj){
	var expression = arguments[0];
	var statements = arguments[1];
	
	// evaluate expression?
	// walk statements if true
}

/* for example in if(x ?= 1){...} else{...}
 * exp would be a equality check node for x and 1
 * statementswould be a statement list with the code from the if statement body
 * elseStatements would a statement list with the code from the else body 
 */
function walkIfElse(obj){
	var exp = arguments[0];
	var statements = arguments[1];
	var elseStatements= arguments[2];
	
	// walkIf ([expression, statements])
	// walkStatements () // TODO: find equivalent of walkStatments
}

/* for example in while(b ?= true){...}
 * exp would be an equality check node for b and true
 * body would be a statement list with the code from the while loop body
 */
function walkWhile(obj){
	var exp = arguments[0];
	var body = arguments[1];
	
	// evaluate exp to see whether we should walk body
}

/* for example Do{...}while(b = true)
 * exp would be an equality check node for b and true
 * body would be a statement list with the code from the do while loop body
 */
function walkDoWhile(obj){
	var exp = arguments[0];
	var body = arguments[1];
	
	// walk body
	// evaluate exp to see whether we should walk body again
}

/* for example in For(int i = 0; i ?< 5; i++){...}
 * decl would be a VaraibleDeclAssign node for int i = 0
 * condition would be a equality check node between variable i and 5
 * update would be an increment node for i
 * body would be a statement list with the code from the for loop body
 */
function walkFor(obj){
	var decl = arguments[0];
	var condition = arguments[1];
	var update = arguments[2];
	var body = arguments[3];
	
	// walk declaration, add stuff to symbol table		// TODO check with Kris, seems like this necessitates a new variable be declared every time, meaning we can't use others.
	// evaluate condition to see if we should walk body
	// walk body
	// walk update clause and return to beginning.
}

// TODO: mathematical operation type checking? overloading?

/* assigns variables to both sides of statement
 * for example in x + y
 * left = x
 * right = y
 */
function walkAddition(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// if int, opcodes to push left and right to stack
	// if float, opcodes to push left and right to constant pool
	// other types, not sure what to do here. operator overloading?
	// after things pushed to their appropriate places, send opcodes for addition.
}

/* assigns variables to both sides of statement
 * for example in x - y
 * left = x
 * right = y
 */
function walkMinus(obj){
	var left = arguments[0];
	var right = arguments[1];
	
		// if int, opcodes to push left and right to stack
	// if float, opcodes to push left and right to constant pool
	// other types, not sure what to do here. operator overloading?
	// after things pushed to their appropriate places, send opcodes for subtraction.
}

/* assigns variables to both sides of statement
 * for example in x * y
 * left = x
 * right = y
 */
function walkMultiplication(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// if int, opcodes to push left and right to stack
	// if float, opcodes to push left and right to constant pool
	// other types, not sure what to do here. operator overloading?
	// after things pushed to their appropriate places, send opcodes for multiplition.
}

/* assigns variables to both sides of statement
 * for example in x / y
 * left = x
 * right = y
 */
function walkDivision(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// if int, opcodes to push left and right to stack
	// if float, opcodes to push left and right to constant pool
	// other types, not sure what to do here. operator overloading?
	// after things pushed to their appropriate places, send opcodes for division.
}

/* assigns variables to both sides of statement
 * for example in x % y
 * left = x
 * right = y
 */
function walkModulo(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// if int, opcodes to push left and right to stack
	// if float, opcodes to push left and right to constant pool
	// other types, not sure what to do here. operator overloading?
// after things pushed to their appropriate places, send opcodes for modulo arithetic.
}

/* assigns variables to both sides of statement
/for example in x += y
 * left = x
 * right = y
 */
function walkAddAssign(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// operation x += y expands to x = x + y
	// this means we need to add x and y, then assign result to x
	// so, walkAssign(x, walkAdd(x,y))
}

/* assigns variables to both sides of statement
 * for example in x -= y
 * left = x
 * right = y
 */
function walkSubAssign(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// operation x -= y expands to x = x - y
	// this means we need to subtract y from x, then assign the result to x
	// so, walkAssign(x, walkSubtract(x,y))
}

/* assigns variables to both sides of statement
 * for example in x * = y
 * left = x
 * right = y
 */
function walkMultiAssign(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// operation x *= expands to x = x * y
	// this means we need to multiply x by y, then assign to x
	// so, walkAssign(x, walkMultiply(x,y))
}

/* assigns variables to both sides of statement
 * for example in x /= y
 * left = x
 * right = y
 */
function walkDivAssign(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// operation x /= yexpands to x = x / y
	// this means we need to divide x by y, then assign to x
	// so, walkAssign(x, walkDivide(x,y))
}

/* assigns variables to both sides of statement
 * for example in x %= y
 * left = x
 * right = y
 */
function walkModAssign(obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// operation x %= y expands to x = x % y
	// this means we need to get x % y, then assign to x
	// so, walkAssign(x, walkModulo(x+y))
}

/* assigns variables to both sides of statement
 * for example in x++
 * name = x
 */
function walkIncrement(obj){
	var name = arguments[0];
	
	// x++ expands to x = x + 1
	// so, walkAssign(walkAdd(x,1))
}

//----------TODO: check which is the better syntax: function ...(...) or var ... = function (...)------------------------------------------------------------------------

/* assigns variables to both sides of statement
 * for example in x--
 * name = x
 */
function walkDecrement (obj){
	var name = arguments[0];
	
	// x-- expands to x = x - 1
	// so, walkAssign(walkSubtract(x,1))
	// or, walkAssign(walkAdd(x,-1))
}

/* assigns variables to both sides of statement
 * for example in x && 2
 * left = x
 * right = 2
 */
function walkAnd (obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// TODO: make evaluate function
	// check both evaluate to true.
	// Evaluate(left)
	// Evaluate(right)
}

/* assigns variables to both sides of statement
 * for example in x || 2
 * left = x
 * right = 2
 */
function walkOr (obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// check if either evaluates to true.
	// Evaluate(left)
	// Evaluate(right)
}

/* assigns variables to both sides of statement
 * for example in x = 2
 * left = x
 * right = 2
 */
function walkAssign (obj){
	var left = arguments[0];
	var right = arguments[1];
	
	// find left in symbol table/scope tree, warn about undeclared if not there.
	// evaluate (walk) right.
	
}

	// TODO check with Darren about bitwise operator opcodes.

/* assigns variables to both sides of statement
 * for example in x & 2
 * left = x
 * right = 2
 */
function walkBitAND (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x >>> 2
 * left = x
 * right = 2
 */
function walkZeroFillRightShift (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x | 2
 * left = x
 * right = 2
 */
function walkBitOR (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x >> 2
 * left = x
 * right = 2
 */
function walkBitRightShift (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x << 2
 * left = x
 * right = 2
 */
function walkBitLeftShift (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x ^ 2
 * left = x
 * right = 2
 */
function walkbitXOR (obj){
	var left = arguments[0];
	var right = arguments[1];
}

// TODO: evaluation function for boolean logic

/* assigns variables to both sides of statement
 * for example in != 2
 * left = x
 * right = 2
 */
function walkNotEqual (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x <= 2
 * left = x
 * right = 2
 */
function walkLessThanOrEqual (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x < 2
 * left = x
 * right = 2
 */
function walkLessThan (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x > 2
 * left = x
 * right = 2
 */
function walkLargerThan (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x >= 2
 * left = x
 * right = 2
 */
function walkGreaterThanOrEqual (obj){
	var left = arguments[0];
	var right = arguments[1];
}

/* assigns variables to both sides of statement
 * for example in x ?= 2
 * left = x
 * right = 2
 */
function walkEquality (obj){
	var left = arguments[0];
	var right = arguments[1];
}


function walkUnknown(obj) {
	unknown = new Object();
	unknown.type = "I can't walk that";
	unknown.arguments = "unknown node : (" + obj.toString() + ")";
	printNode(unknown);
}
