/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,40],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,14],$Vh=[1,15],$Vi=[1,16],$Vj=[1,17],$Vk=[1,18],$Vl=[1,19],$Vm=[1,20],$Vn=[1,21],$Vo=[1,22],$Vp=[1,23],$Vq=[1,24],$Vr=[5,10,20,25,31,33,34,35,36,37,38,68,69,70,71,72,73,77,78,79,80,81,82,83,84,85,86,87],$Vs=[1,44],$Vt=[5,10,20,25,26,31,32,33,34,35,36,37,38,68,69,70,71,72,73,77,78,79,80,81,82,83,84,85,86,87],$Vu=[2,79],$Vv=[1,47],$Vw=[25,68],$Vx=[5,10,20,21,25,26,31,32,33,34,35,36,37,38,68,69,70,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87],$Vy=[1,74],$Vz=[1,48],$VA=[1,49],$VB=[1,50],$VC=[1,51],$VD=[1,52],$VE=[1,53],$VF=[1,54],$VG=[1,55],$VH=[1,56],$VI=[1,57],$VJ=[1,58],$VK=[1,59],$VL=[1,60],$VM=[1,61],$VN=[1,62],$VO=[1,63],$VP=[1,64],$VQ=[1,65],$VR=[1,66],$VS=[1,67],$VT=[1,68],$VU=[1,69],$VV=[1,70],$VW=[1,71],$VX=[1,72],$VY=[1,73],$VZ=[2,85],$V_=[1,75],$V$=[1,89],$V01=[5,10,16,20,21,24,25,26,31,32,33,34,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87],$V11=[21,24],$V21=[1,126],$V31=[20,25,26,31,33,34,35,36,37,38,68,69,70,71,72,73],$V41=[2,83],$V51=[20,25,68,69,70,71,72,73],$V61=[21,24,26],$V71=[19,25];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"program":4,"EOF":5,"declarations":6,"out-decl":7,"in-decl":8,"statement":9,"FUNCTION":10,"declarator":11,"declaration_list":12,"func_return":13,"body":14,"type":15,"ASSIGN":16,"exp":17,"semi":18,"RETURN_TYPE":19,"OPEN_PARENS":20,"CLOSE_PARENS":21,"param_list":22,"param":23,"COMMA":24,"OPEN_BRACE":25,"CLOSE_BRACE":26,"statement_list":27,"condition_statements":28,"iteration_statements":29,"jump_statements":30,"IF":31,"ELSE":32,"WHILE":33,"DO":34,"FOR":35,"CONTINUE":36,"BREAK":37,"RETURN":38,"list":39,"prim_expr":40,"point_assign":41,"PLUS":42,"MINUS":43,"ASTERIX":44,"DIV":45,"MODULO":46,"OP_ADD_ASSIGNMENT":47,"OP_SUB_ASSIGNMENT":48,"OP_MULT_ASSIGNMENT":49,"OP_DIV_ASSIGNMENT":50,"OP_MOD_ASSIGNMENT":51,"OP_INC":52,"OP_DEC":53,"OP_AND":54,"OP_OR":55,"CARET":56,"AMP":57,"BITWISE_OR":58,"OP_RIGHT_SHIFT":59,"OP_LEFT_SHIFT":60,"ZERO_FILL_RIGHT_SHIFT":61,"OP_EQ":62,"LT":63,"GT":64,"OP_NE":65,"OP_LE":66,"OP_GE":67,"IDENTIFIER":68,"DIGIT":69,"TRUE":70,"FALSE":71,"STRINGT":72,"NOT":73,"init_list":74,"SEMICOLON":75,"declaration":76,"VOID":77,"STRING":78,"INT":79,"FLOAT":80,"BOOL":81,"POINT":82,"VECTOR_2":83,"VECTOR_3":84,"VECTOR_4":85,"LINE":86,"POLYGON":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"FUNCTION",16:"ASSIGN",19:"RETURN_TYPE",20:"OPEN_PARENS",21:"CLOSE_PARENS",24:"COMMA",25:"OPEN_BRACE",26:"CLOSE_BRACE",31:"IF",32:"ELSE",33:"WHILE",34:"DO",35:"FOR",36:"CONTINUE",37:"BREAK",38:"RETURN",42:"PLUS",43:"MINUS",44:"ASTERIX",45:"DIV",46:"MODULO",47:"OP_ADD_ASSIGNMENT",48:"OP_SUB_ASSIGNMENT",49:"OP_MULT_ASSIGNMENT",50:"OP_DIV_ASSIGNMENT",51:"OP_MOD_ASSIGNMENT",52:"OP_INC",53:"OP_DEC",54:"OP_AND",55:"OP_OR",56:"CARET",57:"AMP",58:"BITWISE_OR",59:"OP_RIGHT_SHIFT",60:"OP_LEFT_SHIFT",61:"ZERO_FILL_RIGHT_SHIFT",62:"OP_EQ",63:"LT",64:"GT",65:"OP_NE",66:"OP_LE",67:"OP_GE",68:"IDENTIFIER",69:"DIGIT",70:"TRUE",71:"FALSE",72:"STRINGT",73:"NOT",75:"SEMICOLON",77:"VOID",78:"STRING",79:"INT",80:"FLOAT",81:"BOOL",82:"POINT",83:"VECTOR_2",84:"VECTOR_3",85:"VECTOR_4",86:"LINE",87:"POLYGON"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[7,5],[8,5],[13,2],[13,0],[12,2],[12,3],[22,1],[22,3],[23,2],[14,2],[14,3],[14,4],[9,2],[9,1],[9,1],[9,1],[9,1],[28,5],[28,7],[29,5],[29,7],[29,9],[30,2],[30,2],[30,3],[30,2],[27,1],[27,2],[39,1],[39,3],[39,0],[41,1],[41,3],[17,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,2],[40,3],[40,5],[40,3],[40,3],[18,1],[18,0],[11,1],[76,1],[76,4],[74,1],[74,3],[74,0],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return " blop";
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,14:10,15:8,17:9,20:$V1,25:$V2,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},{1:[3]},{5:[1,41],6:42,7:4,8:5,9:6,10:$V0,14:10,15:8,17:9,20:$V1,25:$V2,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},o($Vr,[2,2]),o($Vr,[2,4]),o($Vr,[2,5]),o($Vr,[2,6]),{11:43,68:$Vs},{11:45,68:$Vs},o($Vt,$Vu,{18:46,75:$Vv}),o($Vt,[2,20]),o($Vt,[2,21]),o($Vt,[2,22]),o($Vt,[2,23]),o($Vw,[2,86]),o($Vw,[2,87]),o($Vw,[2,88]),o($Vw,[2,89]),o($Vw,[2,90]),o($Vw,[2,91]),o($Vw,[2,92]),o($Vw,[2,93]),o($Vw,[2,94]),o($Vw,[2,95]),o($Vw,[2,96]),o($Vx,[2,40],{16:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT,63:$VU,64:$VV,65:$VW,66:$VX,67:$VY}),{8:77,9:79,14:10,15:8,17:9,20:$V1,24:$VZ,25:$V2,26:$V_,27:76,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:80,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf,74:78,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},{20:[1,81]},{20:[1,82]},{9:83,14:10,17:9,20:$V1,25:$V2,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{20:[1,84]},o($Vt,$Vu,{18:85,75:$Vv}),o($Vt,$Vu,{18:86,75:$Vv}),o([5,10,26,31,32,33,34,35,36,37,38,77,78,79,80,81,82,83,84,85,86,87],$Vu,{40:25,17:87,18:88,20:$V1,25:$V$,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf,75:$Vv}),o([5,10,16,21,24,25,26,31,32,33,34,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87],[2,68],{20:[1,90]}),o($V01,[2,69]),o($V01,[2,70]),o($V01,[2,71]),o($V01,[2,72]),{20:$V1,25:$V$,40:91,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($V11,$VZ,{40:80,17:92,74:93,20:$V1,25:$V$,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf}),{1:[2,1]},o($Vr,[2,3]),{12:94,20:[1,95]},o([16,20,21,24],[2,80]),{16:[1,96]},o($Vt,[2,19]),o($V01,[2,78]),{17:97,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:98,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:99,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:100,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:101,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:102,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:103,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:104,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:105,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:106,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($Vx,[2,51]),o($Vx,[2,52]),{17:107,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:108,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:109,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:110,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:111,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:112,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:113,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:114,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:115,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:116,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:117,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:118,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:119,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:120,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:121,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($Vt,[2,16]),{9:123,14:10,17:9,20:$V1,25:$V2,26:[1,122],28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{9:79,14:10,17:9,20:$V1,25:$V2,27:124,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{24:$V21,26:[1,125]},o($V31,[2,33]),o([20,21,24,25,26,31,33,34,35,36,37,38,68,69,70,71,72,73,75],$V41,{16:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT,63:$VU,64:$VV,65:$VW,66:$VX,67:$VY}),{17:127,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:128,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{33:[1,129]},{8:130,15:8,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},o($Vt,[2,29]),o($Vt,[2,30]),o($Vt,$Vu,{18:131,75:$Vv}),o($Vt,[2,32]),o([24,26],$VZ,{74:78,40:132,20:$V1,25:$V$,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf}),o($V11,$VZ,{40:132,74:133,20:$V1,25:$V$,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf}),o($V01,[2,73]),{21:[1,134]},{21:[1,135],24:$V21},{13:136,19:[1,137],25:[2,10]},{15:141,21:[1,138],22:139,23:140,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},{17:142,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($Vx,[2,41]),o($Vx,[2,42]),o($Vx,[2,43]),o($Vx,[2,44]),o($Vx,[2,45]),o($Vx,[2,46]),o($Vx,[2,47]),o($Vx,[2,48]),o($Vx,[2,49]),o($Vx,[2,50]),o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),o($Vx,[2,56]),o($Vx,[2,57]),o($Vx,[2,58]),o($Vx,[2,59]),o($Vx,[2,60]),o($Vx,[2,61]),o($Vx,[2,62]),o($Vx,[2,63]),o($Vx,[2,64]),o($Vx,[2,65]),o($Vx,[2,66]),o($Vx,[2,67]),o($Vt,[2,17]),o($V31,[2,34]),{9:123,14:10,17:9,20:$V1,25:$V2,26:[1,143],28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($V01,[2,76]),{20:$V1,25:$V$,40:144,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{21:[1,145]},{21:[1,146]},{20:[1,147]},o($V51,$Vu,{18:148,75:$Vv}),o($Vt,[2,31]),o($V61,$V41),{21:[1,149],24:$V21},o($V01,[2,74]),o($V01,[2,77]),{14:150,25:[1,151]},{15:152,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},o($V71,[2,11]),{21:[1,153],24:[1,154]},o($V11,[2,13]),{11:155,68:$Vs},o($Vr,$Vu,{18:156,75:$Vv}),o($Vt,[2,18]),o($V61,[2,84]),{9:157,14:10,17:9,20:$V1,25:$V2,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{9:158,14:10,17:9,20:$V1,25:$V2,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:159,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},{17:160,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o([5,10,16,20,21,24,25,26,31,32,33,34,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,78,79,80,81,82,83,84,85,86,87],$Vu,{18:161,75:$Vv}),o($Vr,[2,7]),{8:77,9:79,14:10,15:8,17:9,20:$V1,25:$V2,26:$V_,27:76,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},{25:[2,9]},o($V71,[2,12]),{15:141,23:162,77:$Vg,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$Vq},o($V11,[2,15]),o([5,10,20,25,31,33,34,35,36,37,38,68,69,70,71,72,73,75,77,78,79,80,81,82,83,84,85,86,87],[2,8]),o([5,10,20,25,26,31,33,34,35,36,37,38,68,69,70,71,72,73,77,78,79,80,81,82,83,84,85,86,87],[2,24],{32:[1,163]}),o($Vt,[2,26]),{21:[1,164]},o($V51,$Vu,{18:165,75:$Vv}),o($V01,[2,75]),o($V11,[2,14]),{9:166,14:10,17:9,20:$V1,25:$V2,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($Vt,$Vu,{18:167,75:$Vv}),{17:168,20:$V1,25:$V$,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($Vt,[2,25]),o($Vt,[2,27]),{21:[1,169]},{9:170,14:10,17:9,20:$V1,25:$V2,28:11,29:12,30:13,31:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:25,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,73:$Vf},o($Vt,[2,28])],
defaultActions: {41:[2,1],152:[2,9]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore comment */
break;
case 2:/* ignore comment */
break;
case 3:return 81;
break;
case 4:return 37;
break;
case 5:return 'CLEAR'; 
break;
case 6:return 36;
break;
case 7:return 34;
break;
case 8:return 32;
break;
case 9:return 71;
break;
case 10:return 80;
break;
case 11:return 35;
break;
case 12:return 10
break;
case 13:return 31;
break;
case 14:return 86;
break;
case 15:return 79;
break;
case 16:return 73;
break;
case 17:return 'NULL';
break;
case 18:return 82;
break;
case 19:return 87;
break;
case 20:return 38;
break;
case 21:return 78;
break;
case 22:return 70;
break;
case 23:return 77;
break;
case 24:return 33;
break;
case 25:return 83;
break;
case 26:return 84;
break;
case 27:return 85;
break;
case 28:return 25;
break;
case 29:return 26;
break;
case 30:return 'OPEN_BRACKET';
break;
case 31:return 'CLOSE_BRACKET';
break;
case 32:return 20;
break;
case 33:return 21;
break;
case 34:return 24;
break;
case 35:return 'COLON';
break;
case 36:return 75;
break;
case 37:return 19;
break;
case 38:return 16;
break;
case 39:return 47;
break;
case 40:return 52;
break;
case 41:return 42;
break;
case 42:return 48;
break;
case 43:return 53;
break;
case 44:return 43;
break;
case 45:return 49;
break;
case 46:return 44;
break;
case 47:return 50;
break;
case 48:return 45;
break;
case 49:return 51;
break;
case 50:return 46;
break;
case 51:return 54;
break;
case 52:return 'OP_AND_ASSIGNMENT';
break;
case 53:return 57;
break;
case 54:return 55;
break;
case 55:return 'OP_OR_ASSIGNMENT';
break;
case 56:return 58;
break;
case 57:return 'OP_XOR_ASSIGNMENT';
break;
case 58:return 56;
break;
case 59:return 'TILDE';
break;
case 60:return 62;
break;
case 61:return 63;
break;
case 62:return 64;
break;
case 63:return 65;
break;
case 64:return 66;
break;
case 65:return 67;
break;
case 66:return 'EXCL';
break;
case 67:return 'OP_LEFT_SHIFT_ASSIGNMENT';
break;
case 68:return 60;
break;
case 69:return 'OP_RIGHT_SHIFT_ASSIGNMENT';
break;
case 70:return 61;
break;
case 71:return 59;
break;
case 72:return 5;
break;
case 73:yy_.yytext = yy_.yytext.slice(1,-1); return 72
break;
case 74:return 69;
break;
case 75:return 69;
break;
case 76:return 68;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:#.*)/,/^(?:bool\b)/,/^(?:break\b)/,/^(?:clear\b)/,/^(?:continue\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:Line\b)/,/^(?:int\b)/,/^(?:not\b)/,/^(?:null\b)/,/^(?:Point\b)/,/^(?:Polygon\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:vector\(2\))/,/^(?:vector\(3\))/,/^(?:vector\(4\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:->)/,/^(?:=)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%=)/,/^(?:%)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:\?=)/,/^(?:\?<)/,/^(?:\?>)/,/^(?:!=)/,/^(?:!>)/,/^(?:!<)/,/^(?:!)/,/^(?:<<=)/,/^(?:<<)/,/^(?:>>=)/,/^(?:>>>)/,/^(?:>>)/,/^(?:$)/,/^(?:"[^"]+")/,/^(?:[0-9]+(\.[0-9]*)?)/,/^(?:\.[0-9]+)/,/^(?:[a-zA-Z_]+[a-zA-Z0-9_]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}